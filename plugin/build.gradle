/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.1.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation "org.eclipse.xtext:org.eclipse.xtext:2.25.0"
    implementation 'org.eclipse.emf:org.eclipse.emf.ecore.xcore.lib:+'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

group = 'io.github.ATL-Research.ecore2xcore'
version = '1.0'

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'io.github.ATL-Research.ecore2xcore'
            displayName = 'Ecore to Xcore generator'
            description = 'This plugin generates xcore metamodels from ecore metamodels'
            implementationClass = 'fr.naomod.ecore2xcore.Ecore2xcoreGradlePlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/ATL-Research/ecore2xcore-gradle-plugin'
    vcsUrl = 'https://github.com/ATL-Research/ecore2xcore-gradle-plugin'
    tags = ['ecore', 'xcore', 'emf']
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
        java {
            srcDirs += ['src/main/java']
        }
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
